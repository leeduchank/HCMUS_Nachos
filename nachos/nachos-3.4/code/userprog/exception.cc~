// exception.cc 
//	Entry point into the Nachos kernel from user programs.
//	There are two kinds of things that can cause control to
//	transfer back to here from user code:
//
//	syscall -- The user code explicitly requests to call a procedure
//	in the Nachos kernel.  Right now, the only function we support is
//	"Halt".
//
//	exceptions -- The user code does something that the CPU can't handle.
//	For instance, accessing memory that doesn't exist, arithmetic errors,
//	etc.  
//
//	Interrupts (which can also cause control to transfer from user
//	code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"

#define MaxFileLength 32 // Do dai quy uoc cho file name

//----------------------------------------------------------------------
// ExceptionHandler
// 	Entry point into the Nachos kernel.  Called when a user program
//	is executing, and either does a syscall, or generates an addressing
//	or arithmetic exception.
//
// 	For system calls, the following is the calling convention:
//
// 	system call code -- r2
//		arg1 -- r4
//		arg2 -- r5
//		arg3 -- r6
//		arg4 -- r7
//
//	The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//	"which" is the kind of exception.  The list of possible exceptions 
//	are in machine.h.
//----------------------------------------------------------------------
void IncreasePC()
{
	int counter = machine->ReadRegister(PCReg);
	machine->WriteRegister(PrevPCReg,counter);
	counter = machine->ReadRegister(NextPCReg);
	machine->WriteRegister(PCReg,counter);
	machine->WriteRegister(NextPCReg,counter + 4);
}

/* 
Input: - User space address (int) 
 - Limit of buffer (int) 
Output:- Buffer (char*) 
Purpose: Copy buffer from User memory space to System memory space 
*/ 
char* User2System(int virtAddr,int limit) 
{ 
 int i;// index 
 int oneChar; 
 char* kernelBuf = NULL; 
 
 kernelBuf = new char[limit +1];//need for terminal string 
 if (kernelBuf == NULL) 
 return kernelBuf; 
 memset(kernelBuf,0,limit+1); 
 
 //printf("\n Filename u2s:"); 
 for (i = 0 ; i < limit ;i++) 
 { 
 machine->ReadMem(virtAddr+i,1,&oneChar); 
 kernelBuf[i] = (char)oneChar; 
 //printf("%c",kernelBuf[i]); 
 if (oneChar == 0) 
 break; 
 } 
 return kernelBuf; 
} 
/* 
Input: - User space address (int) 
 - Limit of buffer (int) 
 - Buffer (char[]) 
Output:- Number of bytes copied (int) 
Purpose: Copy buffer from System memory space to User memory space 
*/ 
int System2User(int virtAddr,int len,char* buffer) 
{ 
 if (len < 0) return -1; 
 if (len == 0)return len; 
 int i = 0; 
 int oneChar = 0 ; 
 do{ 
 oneChar= (int) buffer[i]; 
 machine->WriteMem(virtAddr+i,1,oneChar); 
 i ++; 
 }while(i < len && oneChar != 0); 
 return i; 
}
int ReadInt(){


return 0;
}
void
ExceptionHandler(ExceptionType which)
{
    int type = machine->ReadRegister(2);
	switch (which)
	{
	case NoException: 
	 return; 
	case PageFaultException:{
            printf("User exception: Page Fault Exception\n");
	    interrupt->Halt();	
            break;
        }
        case ReadOnlyException:{
            printf("User exception: Read Only Exception\n");
	    interrupt->Halt();	
            break;
        }
        case BusErrorException:{
            printf("User exception: Bus Error Exception\n");
	    interrupt->Halt();	
            break;
        }
        case AddressErrorException:{
            printf("User exception: Address Error Exception\n");
            interrupt->Halt();	
            break;
        }
        case OverflowException:{
            printf("User exception: Over flow Exception\n");
            interrupt->Halt();	
            break;
        }
        case IllegalInstrException:{
            printf("User exception: Illegal Instr Exception\n");
            interrupt->Halt();	
            break;
        }
        case NumExceptionTypes: {
            printf("User exception: Num Exception Types\n");
	    interrupt->Halt();	
            break;
        }
	case SyscallException: 
 	switch (type)
		{ 
		case SC_Halt: 
 		DEBUG('a', "\n Shutdown, initiated by user program."); 
 		printf ("\n\n Shutdown, initiated by user program.");
		IncreasePC(); 
 		interrupt->Halt();
		case SC_ReadInt:
		{
		const int MAX_BUFFER = 255;
		char * buffer = new char [MAX_BUFFER + 1];
		int numbytes = gSynchConsole->Read(buffer, MAX_BUFFER);

		int firstNumIndex = 0;
		if (buffer[0] == '-') {
		    firstNumIndex = 1; // Nếu số âm, bỏ qua ký tự "-"
		}

		bool isValid = true;
		int number = 0;
		for (int i = firstNumIndex; i < numbytes; i++) {
		    if (buffer[i] < '0' || buffer[i] > '9') { // Kiểm tra ký tự không phải số
			isValid = false;
		
			break;
		    }
		    number = number * 10 + (int)(buffer[i] - '0');
		}

		if (!isValid) {
		    printf("\n\n The integer number is not valid\n");
		    DEBUG('a', "\n The integer number is not valid\n");
		    machine->WriteRegister(2, 0);
		    IncreasePC();
		    delete buffer;
		    return;
		} else {
			
		    if (buffer[0] == '-') {
			number = -number; // Nếu số âm, đổi dấu
		    }
		    machine->WriteRegister(2, number);
		    IncreasePC();
		    delete buffer;
		    return;		
		}
	}

		case SC_PrintInt:
		{	
		    // Input: mot so integer
                    // Output: khong co 
                    // Chuc nang: In so nguyen len man hinh console
                    	int number = machine->ReadRegister(4);
			if (number == 0) {
			    gSynchConsole->Write("0", 1); // In ra màn hình số 0
			    IncreasePC();
			    return;    
			}

			// Chuyển số thành chuỗi để in ra màn hình
			bool isNegative = false;
			int numDigits = 0;
			int firstNumIndex = 0;

			if (number < 0) {
			    isNegative = true;
			    number = -number; 
			    firstNumIndex = 1; 
			} 

			int temp = number; 
			while (temp) {
			    numDigits++;
			    temp /= 10;
			}

			char* buffer;
			int MAX_BUFFER = 255;
			buffer = new char[MAX_BUFFER + 1];
			for (int i = firstNumIndex + numDigits - 1; i >= firstNumIndex; i--) {
			    buffer[i] = (char)((number % 10) + 48);
			    number /= 10;
			}

			if (isNegative) {
			    buffer[0] = '-';
			    buffer[numDigits + 1] = 0;
			    gSynchConsole->Write(buffer, numDigits + 1);
			    delete buffer;
			    IncreasePC();
			    return;
			}

			buffer[numDigits] = 0;    
			gSynchConsole->Write(buffer, numDigits);
			delete buffer;
			IncreasePC();
			return;
    			
					
		        }
 
		    case SC_ReadChar:
		{

			//Input: Khong co
			//Output: Duy nhat 1 ky tu (char)
			//Cong dung: Doc mot ky tu tu nguoi dung nhap
			int maxBytes = 255;
			char* buffer = new char[255];
			int numBytes = gSynchConsole->Read(buffer, maxBytes);

			if(numBytes > 1) //Neu nhap nhieu hon 1 ky tu thi khong hop le
			{
				printf("Only 1 entry can be entered!\n");
				DEBUG('a', "\nERROR: Only 1 entry can be entered!\n");
				machine->WriteRegister(2, 0);
				delete buffer;
				IncreasePC(); // error system
				return;
			}
			else if(numBytes == 0) //Ky tu rong
			{
				printf("Empty character!");
				DEBUG('a', "\nERROR: Empty character!");
				machine->WriteRegister(2, 0);
				delete buffer;
				IncreasePC(); // error system
				return;
			}
			else
			{
				//Chuoi vua lay co dung 1 ky tu, lay ky tu o index = 0, return vao thanh ghi R2
				char c = buffer[0];
				machine->WriteRegister(2, c);
			}

			delete buffer;
			IncreasePC(); // error system
			return;
			
		}

		case SC_PrintChar:
		{
			// Input: Ki tu(char)
			// Output: Ki tu(char)
			// Cong dung: Xuat mot ki tu la tham so arg ra man hinh
			char c = (char)machine->ReadRegister(4); // Doc ki tu tu thanh ghi r4
			gSynchConsole->Write(&c, 1); // In ky tu tu bien c, 1 byte
			IncreasePC();
			return;

		}
		case SC_ReadString:
		{
			// Input: Buffer(char*), do dai toi da cua chuoi nhap vao(int)
			// Output: Khong co
			// Cong dung: Doc vao mot chuoi voi tham so la buffer va do dai toi da
			 int virAddr = machine->ReadRegister(4);
			 const int limit = 128;
			 int readBytes;
			 char *buffer = NULL;
			    
			    // lay buffer (chuoi) tu vung nho cua nguoi dung
			    buffer = User2System(virAddr, limit);
			    readBytes = gSynchConsole->Read(buffer, limit);
			    
			    int i = 0;
			    while (buffer[i] != '\0') {
				i++;
			    }
    			int result = System2User(virAddr, i, buffer);
    			machine->WriteRegister(2, result);
			delete buffer; 
			IncreasePC(); // Tang Program Counter 
			return;
			
		}

		case SC_PrintString:
		{
			// Input: Buffer(char*)
			// Output: Chuoi doc duoc tu buffer(char*)
			// Cong dung: Xuat mot chuoi la tham so buffer truyen vao ra man hinh
			int virAddr = machine->ReadRegister(4);
			    const int limit = 128; // gioi han bytes se lay tu vung nho (co the chinh thanh so khac)
			char *buffer = NULL;
			    
			    // lay buffer (chuoi) tu vung nho cua nguoi dung
			buffer = User2System(virAddr, limit);
			    
			    // Xuat chuoi ra console = ham Write trong lop SynchConsole
			for(int i = 0; buffer[i] != '\0'; ++i)
				ioSynCons->Write(&buffer[i], 1);
			delete buffer; 
			IncreasePC(); // Tang Program Counter 
			return;
			
		}
        	      			
	        break;
	        }
        }
  
}
